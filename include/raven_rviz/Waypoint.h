// Generated by gencpp from file raven_rviz/Waypoint.msg
// DO NOT EDIT!


#ifndef RAVEN_RVIZ_MESSAGE_WAYPOINT_H
#define RAVEN_RVIZ_MESSAGE_WAYPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>

namespace raven_rviz
{
template <class ContainerAllocator>
struct Waypoint_
{
  typedef Waypoint_<ContainerAllocator> Type;

  Waypoint_()
    : header()
    , goal_pose()
    , takeoff(false)
    , land(false)
    , velocity(0.0)
    , acceleration(0.0)  {
    }
  Waypoint_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , goal_pose(_alloc)
    , takeoff(false)
    , land(false)
    , velocity(0.0)
    , acceleration(0.0)  {
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _goal_pose_type;
  _goal_pose_type goal_pose;

   typedef uint8_t _takeoff_type;
  _takeoff_type takeoff;

   typedef uint8_t _land_type;
  _land_type land;

   typedef double _velocity_type;
  _velocity_type velocity;

   typedef double _acceleration_type;
  _acceleration_type acceleration;




  typedef boost::shared_ptr< ::raven_rviz::Waypoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::raven_rviz::Waypoint_<ContainerAllocator> const> ConstPtr;

}; // struct Waypoint_

typedef ::raven_rviz::Waypoint_<std::allocator<void> > Waypoint;

typedef boost::shared_ptr< ::raven_rviz::Waypoint > WaypointPtr;
typedef boost::shared_ptr< ::raven_rviz::Waypoint const> WaypointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::raven_rviz::Waypoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::raven_rviz::Waypoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace raven_rviz

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'raven_rviz': ['/home/swarm/catkin_ws/src/raven_rviz/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::raven_rviz::Waypoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raven_rviz::Waypoint_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::raven_rviz::Waypoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::raven_rviz::Waypoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raven_rviz::Waypoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raven_rviz::Waypoint_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::raven_rviz::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "56bdf59fc43e8083eb916d450d30311a";
  }

  static const char* value(const ::raven_rviz::Waypoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x56bdf59fc43e8083ULL;
  static const uint64_t static_value2 = 0xeb916d450d30311aULL;
};

template<class ContainerAllocator>
struct DataType< ::raven_rviz::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "raven_rviz/Waypoint";
  }

  static const char* value(const ::raven_rviz::Waypoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::raven_rviz::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
geometry_msgs/Pose goal_pose\n\
bool takeoff\n\
bool land\n\
float64 velocity\n\
float64 acceleration\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::raven_rviz::Waypoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::raven_rviz::Waypoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.goal_pose);
      stream.next(m.takeoff);
      stream.next(m.land);
      stream.next(m.velocity);
      stream.next(m.acceleration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Waypoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::raven_rviz::Waypoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::raven_rviz::Waypoint_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "goal_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.goal_pose);
    s << indent << "takeoff: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.takeoff);
    s << indent << "land: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.land);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
    s << indent << "acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.acceleration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAVEN_RVIZ_MESSAGE_WAYPOINT_H
